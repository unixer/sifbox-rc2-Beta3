diff -urN llvm-3.1.src/autoconf/configure.ac llvm-3.1.src.mod/autoconf/configure.ac
--- llvm-3.1.src/autoconf/configure.ac	2012-05-11 22:48:57.000000000 +0200
+++ llvm-3.1.src.mod/autoconf/configure.ac	2012-07-31 11:47:06.739045792 +0200
@@ -402,6 +402,10 @@
        AC_CHECK_PROG(BUILD_CXX, c++, c++, , , /usr/ucb/c++)
      fi
   fi
+  AC_SUBST(BUILD_CPPFLAGS)
+  AC_SUBST(BUILD_CFLAGS)
+  AC_SUBST(BUILD_CXXFLAGS)
+  AC_SUBST(BUILD_LDFLAGS)
 else
   AC_SUBST(LLVM_CROSS_COMPILING, [0])
 fi
diff -urN llvm-3.1.src/autoconf/m4/build_exeext.m4 llvm-3.1.src.mod/autoconf/m4/build_exeext.m4
--- llvm-3.1.src/autoconf/m4/build_exeext.m4	2008-09-26 19:27:58.000000000 +0200
+++ llvm-3.1.src.mod/autoconf/m4/build_exeext.m4	2012-07-31 11:52:25.589045956 +0200
@@ -18,7 +18,7 @@
      fi
   fi
   test -z "$BUILD_CC" && AC_MSG_ERROR([no acceptable cc found in \$PATH])
-  ac_build_link='${BUILD_CC-cc} -o conftest $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&AS_MESSAGE_LOG_FD'
+  ac_build_link='${BUILD_CC-cc} -o conftest $BUILD_CFLAGS $BUILD_CPPFLAGS $BUILD_LDFLAGS conftest.$ac_ext $LIBS 1>&AS_MESSAGE_LOG_FD'
   rm -f conftest*
   echo 'int main () { return 0; }' > conftest.$ac_ext
   ac_cv_build_exeext=
diff -urN llvm-3.1.src/Makefile llvm-3.1.src.mod/Makefile
--- llvm-3.1.src/Makefile	2012-01-17 03:56:49.000000000 +0100
+++ llvm-3.1.src.mod/Makefile	2012-07-31 11:53:32.909045990 +0200
@@ -98,41 +98,6 @@
   DIRS := $(filter-out unittests, $(DIRS))
 endif
 
-# If we're cross-compiling, build the build-hosted tools first
-ifeq ($(LLVM_CROSS_COMPILING),1)
-all:: cross-compile-build-tools
-
-clean::
-	$(Verb) rm -rf BuildTools
-
-cross-compile-build-tools:
-	$(Verb) if [ ! -f BuildTools/Makefile ]; then \
-          $(MKDIR) BuildTools; \
-	  cd BuildTools ; \
-	  unset CFLAGS ; \
-	  unset CXXFLAGS ; \
-	  $(PROJ_SRC_DIR)/configure --build=$(BUILD_TRIPLE) \
-		--host=$(BUILD_TRIPLE) --target=$(BUILD_TRIPLE) \
-	        --disable-polly ; \
-	  cd .. ; \
-	fi; \
-	(unset SDKROOT; \
-	 $(MAKE) -C BuildTools \
-	  BUILD_DIRS_ONLY=1 \
-	  UNIVERSAL= \
-	  TARGET_NATIVE_ARCH="$(TARGET_NATIVE_ARCH)" \
-	  TARGETS_TO_BUILD="$(TARGETS_TO_BUILD)" \
-	  ENABLE_OPTIMIZED=$(ENABLE_OPTIMIZED) \
-	  ENABLE_PROFILING=$(ENABLE_PROFILING) \
-	  ENABLE_COVERAGE=$(ENABLE_COVERAGE) \
-	  DISABLE_ASSERTIONS=$(DISABLE_ASSERTIONS) \
-	  ENABLE_EXPENSIVE_CHECKS=$(ENABLE_EXPENSIVE_CHECKS) \
-	  ENABLE_LIBCPP=$(ENABLE_LIBCPP) \
-	  CFLAGS= \
-	  CXXFLAGS= \
-	) || exit 1;
-endif
-
 # Include the main makefile machinery.
 include $(LLVM_SRC_ROOT)/Makefile.rules
 
diff -urN llvm-3.1.src/Makefile.config.in llvm-3.1.src.mod/Makefile.config.in
--- llvm-3.1.src/Makefile.config.in	2012-05-16 00:06:08.000000000 +0200
+++ llvm-3.1.src.mod/Makefile.config.in	2012-07-31 11:54:20.979046014 +0200
@@ -127,6 +127,10 @@
 # call if we're cross-compiling).
 BUILD_CC=@BUILD_CC@
 BUILD_CXX=@BUILD_CXX@
+BUILD_CPPFLAGS=@BUILD_CPPFLAGS@
+BUILD_CFLAGS=@BUILD_CFLAGS@
+BUILD_CXXFLAGS=@BUILD_CXXFLAGS@
+BUILD_LDFLAGS=@BUILD_LDFLAGS@
 
 # Triple for configuring build tools when cross-compiling
 BUILD_TRIPLE=@build@
diff -urN llvm-3.1.src/Makefile.rules llvm-3.1.src.mod/Makefile.rules
--- llvm-3.1.src/Makefile.rules	2012-05-16 00:06:08.000000000 +0200
+++ llvm-3.1.src.mod/Makefile.rules	2012-07-31 12:04:01.149046312 +0200
@@ -730,17 +730,17 @@
 endif
 
 Compile.C     = $(Compile.Wrapper) \
-	          $(CC) $(CPP.Flags) $(C.Flags) $(CFLAGS) $(CPPFLAGS) \
+                 $(BUILD_CC) $(CPP.Flags) $(C.Flags) $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) \
                 $(TargetCommonOpts) $(CompileCommonOpts) -c
 Compile.CXX   = $(Compile.Wrapper) \
-	          $(CXX) $(CPP.Flags) $(CXX.Flags) $(CXXFLAGS) $(CPPFLAGS) \
+                 $(BUILD_CXX) $(CPP.Flags) $(CXX.Flags) $(BUILD_CXXFLAGS) \
                 $(TargetCommonOpts) $(CompileCommonOpts) -c
 Preprocess.CXX= $(Compile.Wrapper) \
-	          $(CXX) $(CPP.Flags) $(TargetCommonOpts) $(CPPFLAGS) \
+                 $(BUILD_CXX) $(CPP.Flags) $(BUILD_CPPFLAGS) $(TargetCommonOpts) \
                 $(CompileCommonOpts) $(CXX.Flags) -E
 Link          = $(Compile.Wrapper) \
-	          $(CXX) $(CPP.Flags) $(CXX.Flags) $(CXXFLAGS) $(LD.Flags) \
-                $(LDFLAGS) $(TargetCommonOpts)  $(CompileCommonOpts) $(Strip)
+                 $(BUILD_CXX) $(CPP.Flags) $(CXX.Flags) $(BUILD_CXXFLAGS) \
+                 $(LD.Flags) $(BUILD_LDFLAGS) \
 
 BCCompile.C   = $(LLVMCC) $(CPP.Flags) $(C.Flags) $(CFLAGS) $(CPPFLAGS) \
                 $(TargetCommonOpts) $(CompileCommonOpts)
